#####################################################
# Copyright E2 Systems Limited  (c)1993
#
#  gen2.awk - nawk program to generate script skeleton
#
#  generated program facilitates the building of a
#  data driven script.  The navigation file for the
#  generated script will control tailored echo file
#  production.  
#
#####################################################
BEGIN {
FS=":";
#
# parameters required from data file
#  which is : delimited
#
#    $1 = Level of next task
#    $2 = t indicates task with no further sub tasks
#    $3 = Name of file containing keystrokes
#    $4 = Description for task
#    $5 = datafile to be read (blank if not applicable)
#         final entry must be 1:END
#           
#         1,1 |
#             |
#             |
#           
#         1,2 |
#             |________________
#             |            2,1 |  
#                              |
#         1,3 |
#             |            2,2 |
#             |                |
#           
#         1,4 |
#             |________________
#             |            2,3 |
#                              |
#                             
#                          2,4 |
#                              |______________
#                                         3,1 |    
#                                             |
#
#                                         3,2 |
#                                             |
# 
#  The above application structure would be coded as read from the top
#  following each branch as it is met.
#
#           col1    tasks
#           level 
#           ______________________
#            1:t     1,1 
#            1:      1,2
#            2:t     2,1 
#            2:t     2,2
#            1:t     1,3 
#            1:      1,4
#            2:t     2,3
#            2:      2,4
#            3:t     3,1 
#            3:t     3,2
#            1:END
#
#    The command line is  :   nawk -f gen2 data > scriptdr
#
#           where:    gen2      is this program
#                     data      contains the parameters above
#                     scriptdr  is the generated awk program
#                               it is self documented
# 
print "#";
print "#";
print "#####################################################"
print "# Copyright E2 Systems Limited     1993"
print "#####################################################"
#
print "END {";
print "FS=\":\"";
print "#";
print "# A generated script file to be driven by data navigation";
print "#";
print "# This program needs a variable passed from the command line";
print "#       var1=name of navigation file";
print "#";
print "# The navigation file has the format";
print "#   For first level tasks:";
print "#        $1= level number   (thus 1)";
print "#        $2= task number";
print "#        $3= count of tasks at next level down";
print "#            the same task with a count at the next level";
print "#            counts as 1";
print "#";
print "#";
print "#   Thus 1 1 3   would indicate 3 task executions at the 2nd level";
print "#        2 2 1 would execute task 2 at the 2nd level once";
print "#        2 3 2 would execute task 3 at the second level twice";
print "#                this counts as one for the count of 3 two lines above";
print "#        2 1 1 would execute task 1 at the 2nd level once";
print "#        1 2 4   would continue at the first level";
print "#";
print "#     The command line is:    nawk -f progname -v var1=xxxx dummy";
print "#      where:";
print "#                  progname as generated by gen2";
print "#                  var1     contains navigation   ";
print "#                  dummy    may be needed by some nawk implementations";
print "#                           it is simply an empty file";
print "#";
print "#";
print "print \"\\\\R\" cps \"\\\\\""
print "print \"\\\\W\" think \"\\\\# Wait time set to whatever #\""
print "#"
print "# End of standard preamble"
print "# ***********************************************************************"
print "print \"#  INSERT keystrokes to enter application HERE!!!  #\"";
  print "#:keys_ENTER"
print "#";
print "#";
#
#
print "while (getline<\"navy\") {";
print "fl1=$2;";
print "fl1cnt=$3;"
current_level=0;
for (x=0;x==8;x++) task[x]=0
}
{
# Check if new level is less than current_level.  If so insert req terminators
diff=current_level-$1;
if (diff<-1) exit 3;
if (diff>=0) {
  for (x=0;x<=diff;x++) {
  print "    }";
  print "print \"#  End of level" current_level " task " task[current_level] " #\"";
  if (tempt[current_level]==0) print "#:keys_" keys[current_level] "_2" 
  print "  }";
    current_level--
  }
current_level++
}
if (diff==-1) current_level++
}
#
#
$1==1 && $2!~"END" {
#
# set up task at level one
#
task[1]++;
print "# llllllllllllllllllllllllllllllllllllllllllllllllll"; 
print "if (fl1 ==" task[1] ") {"
print "# Level 1 Task " task[1] " "
keys[current_level]=$3;
if ($2=="t") {
tempt[current_level]=1;
print "# loop the required count  ";
print "for (f1=0;f1 < fl1cnt;f1++) {"
}
  print "print \"#  ** Level 1 Task " task[1] "  #\""
  print "print \"#  ** " $4 "  #\""
  if (NF==5) {
    print "getline<\"" $5 "\""
  }
  print "#  Insert keystrokes here "
  print "#:keys_" keys[current_level] 
if ($2!="t") {
tempt[current_level]=0
print "# loop the required count  ";
print "for (f1=0;f1 < fl1cnt;f1++) {";
}
}
#
$1>1 {
#
# inserting event at level two or beyond
#
if (diff!=0) print "getline<\"navy\";"; 
temp3=$1-1;
if (diff!=0) {
print "fl" current_level "=$2;";
print "fl" current_level "cnt=$3;";
}
task[current_level]++;
print "# llllllllllllllllllllllllllllllllllllllllllllllllll"; 
print "if (fl" current_level "==" task[current_level] ") {";
print "# set up at level " current_level " task " task[current_level]; 
keys[current_level]=$3;
if ($2=="t") {
tempt[current_level]=1
print "# loop for required count";
print "for(f" current_level "=0;f" current_level " < fl" current_level "cnt;f" current_level "++) {";
}
print "print \"#  ***L" current_level "T" task[current_level] "***   #\"";
print "print \"#  ** "$4 "  #\""
if (NF==5) {
    print "getline<\"" $5 "\""
    }
  print "#  Insert keystrokes here "
  print "#:keys_" keys[current_level] 
if ($2!="t") {
tempt[current_level]=0
print "# loop for required count";
print "for(f" current_level "=0;f" current_level " < fl" current_level "cnt;f" current_level "++) {";
}
}
#
END {
print "}";
print "#";
print "print \"#  INSERT keystrokes to exit application HERE!!!  #\"";
  print "#:keys_EXIT"
print "print \"#  Finished \"";
print "print \"#\"";
print "}";
#
}
